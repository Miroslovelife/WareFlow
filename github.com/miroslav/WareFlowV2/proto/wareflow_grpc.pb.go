// Code generated by protoc-gen-go-grpc_ware_flow. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc_ware_flow v1.5.1
// - protoc             v3.12.4
// source: proto/wareflow.proto

package wareflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc_ware_flow package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WareFlowService_CreateWarehouse_FullMethodName      = "/wareflow.WareFlowService/CreateWarehouse"
	WareFlowService_GetWarehouse_FullMethodName         = "/wareflow.WareFlowService/GetWarehouse"
	WareFlowService_UpdateWarehouse_FullMethodName      = "/wareflow.WareFlowService/UpdateWarehouse"
	WareFlowService_DeleteWarehouse_FullMethodName      = "/wareflow.WareFlowService/DeleteWarehouse"
	WareFlowService_CreateTransport_FullMethodName      = "/wareflow.WareFlowService/CreateTransport"
	WareFlowService_GetTransport_FullMethodName         = "/wareflow.WareFlowService/GetTransport"
	WareFlowService_UpdateTransport_FullMethodName      = "/wareflow.WareFlowService/UpdateTransport"
	WareFlowService_DeleteTransport_FullMethodName      = "/wareflow.WareFlowService/DeleteTransport"
	WareFlowService_CreateCargo_FullMethodName          = "/wareflow.WareFlowService/CreateCargo"
	WareFlowService_GetCargo_FullMethodName             = "/wareflow.WareFlowService/GetCargo"
	WareFlowService_UpdateCargo_FullMethodName          = "/wareflow.WareFlowService/UpdateCargo"
	WareFlowService_DeleteCargo_FullMethodName          = "/wareflow.WareFlowService/DeleteCargo"
	WareFlowService_CalculateOptimalPath_FullMethodName = "/wareflow.WareFlowService/CalculateOptimalPath"
)

// WareFlowServiceClient is the client API for WareFlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для управления объектами и оптимизации маршрутов
type WareFlowServiceClient interface {
	// Управление складами
	CreateWarehouse(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*WarehouseResponse, error)
	GetWarehouse(ctx context.Context, in *WarehouseRequest, opts ...grpc.CallOption) (*Warehouse, error)
	UpdateWarehouse(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*WarehouseResponse, error)
	DeleteWarehouse(ctx context.Context, in *WarehouseRequest, opts ...grpc.CallOption) (*WarehouseResponse, error)
	// Управление транспортом
	CreateTransport(ctx context.Context, in *Transport, opts ...grpc.CallOption) (*TransportResponse, error)
	GetTransport(ctx context.Context, in *TransportRequest, opts ...grpc.CallOption) (*Transport, error)
	UpdateTransport(ctx context.Context, in *Transport, opts ...grpc.CallOption) (*TransportResponse, error)
	DeleteTransport(ctx context.Context, in *TransportRequest, opts ...grpc.CallOption) (*TransportResponse, error)
	// Управление грузами
	CreateCargo(ctx context.Context, in *Cargo, opts ...grpc.CallOption) (*CargoResponse, error)
	GetCargo(ctx context.Context, in *CargoRequest, opts ...grpc.CallOption) (*Cargo, error)
	UpdateCargo(ctx context.Context, in *Cargo, opts ...grpc.CallOption) (*CargoResponse, error)
	DeleteCargo(ctx context.Context, in *CargoRequest, opts ...grpc.CallOption) (*CargoResponse, error)
	// Оптимизация маршрута
	CalculateOptimalPath(ctx context.Context, in *OptimizationRequest, opts ...grpc.CallOption) (*OptimizationResponse, error)
}

type wareFlowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWareFlowServiceClient(cc grpc.ClientConnInterface) WareFlowServiceClient {
	return &wareFlowServiceClient{cc}
}

func (c *wareFlowServiceClient) CreateWarehouse(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*WarehouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WarehouseResponse)
	err := c.cc.Invoke(ctx, WareFlowService_CreateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) GetWarehouse(ctx context.Context, in *WarehouseRequest, opts ...grpc.CallOption) (*Warehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, WareFlowService_GetWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) UpdateWarehouse(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*WarehouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WarehouseResponse)
	err := c.cc.Invoke(ctx, WareFlowService_UpdateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) DeleteWarehouse(ctx context.Context, in *WarehouseRequest, opts ...grpc.CallOption) (*WarehouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WarehouseResponse)
	err := c.cc.Invoke(ctx, WareFlowService_DeleteWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) CreateTransport(ctx context.Context, in *Transport, opts ...grpc.CallOption) (*TransportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransportResponse)
	err := c.cc.Invoke(ctx, WareFlowService_CreateTransport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) GetTransport(ctx context.Context, in *TransportRequest, opts ...grpc.CallOption) (*Transport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transport)
	err := c.cc.Invoke(ctx, WareFlowService_GetTransport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) UpdateTransport(ctx context.Context, in *Transport, opts ...grpc.CallOption) (*TransportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransportResponse)
	err := c.cc.Invoke(ctx, WareFlowService_UpdateTransport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) DeleteTransport(ctx context.Context, in *TransportRequest, opts ...grpc.CallOption) (*TransportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransportResponse)
	err := c.cc.Invoke(ctx, WareFlowService_DeleteTransport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) CreateCargo(ctx context.Context, in *Cargo, opts ...grpc.CallOption) (*CargoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CargoResponse)
	err := c.cc.Invoke(ctx, WareFlowService_CreateCargo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) GetCargo(ctx context.Context, in *CargoRequest, opts ...grpc.CallOption) (*Cargo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cargo)
	err := c.cc.Invoke(ctx, WareFlowService_GetCargo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) UpdateCargo(ctx context.Context, in *Cargo, opts ...grpc.CallOption) (*CargoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CargoResponse)
	err := c.cc.Invoke(ctx, WareFlowService_UpdateCargo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) DeleteCargo(ctx context.Context, in *CargoRequest, opts ...grpc.CallOption) (*CargoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CargoResponse)
	err := c.cc.Invoke(ctx, WareFlowService_DeleteCargo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareFlowServiceClient) CalculateOptimalPath(ctx context.Context, in *OptimizationRequest, opts ...grpc.CallOption) (*OptimizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizationResponse)
	err := c.cc.Invoke(ctx, WareFlowService_CalculateOptimalPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WareFlowServiceServer is the adapter API for WareFlowService service.
// All implementations must embed UnimplementedWareFlowServiceServer
// for forward compatibility.
//
// Сервис для управления объектами и оптимизации маршрутов
type WareFlowServiceServer interface {
	// Управление складами
	CreateWarehouse(context.Context, *Warehouse) (*WarehouseResponse, error)
	GetWarehouse(context.Context, *WarehouseRequest) (*Warehouse, error)
	UpdateWarehouse(context.Context, *Warehouse) (*WarehouseResponse, error)
	DeleteWarehouse(context.Context, *WarehouseRequest) (*WarehouseResponse, error)
	// Управление транспортом
	CreateTransport(context.Context, *Transport) (*TransportResponse, error)
	GetTransport(context.Context, *TransportRequest) (*Transport, error)
	UpdateTransport(context.Context, *Transport) (*TransportResponse, error)
	DeleteTransport(context.Context, *TransportRequest) (*TransportResponse, error)
	// Управление грузами
	CreateCargo(context.Context, *Cargo) (*CargoResponse, error)
	GetCargo(context.Context, *CargoRequest) (*Cargo, error)
	UpdateCargo(context.Context, *Cargo) (*CargoResponse, error)
	DeleteCargo(context.Context, *CargoRequest) (*CargoResponse, error)
	// Оптимизация маршрута
	CalculateOptimalPath(context.Context, *OptimizationRequest) (*OptimizationResponse, error)
	mustEmbedUnimplementedWareFlowServiceServer()
}

// UnimplementedWareFlowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWareFlowServiceServer struct{}

func (UnimplementedWareFlowServiceServer) CreateWarehouse(context.Context, *Warehouse) (*WarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarehouse not implemented")
}
func (UnimplementedWareFlowServiceServer) GetWarehouse(context.Context, *WarehouseRequest) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouse not implemented")
}
func (UnimplementedWareFlowServiceServer) UpdateWarehouse(context.Context, *Warehouse) (*WarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWarehouse not implemented")
}
func (UnimplementedWareFlowServiceServer) DeleteWarehouse(context.Context, *WarehouseRequest) (*WarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWarehouse not implemented")
}
func (UnimplementedWareFlowServiceServer) CreateTransport(context.Context, *Transport) (*TransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransport not implemented")
}
func (UnimplementedWareFlowServiceServer) GetTransport(context.Context, *TransportRequest) (*Transport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransport not implemented")
}
func (UnimplementedWareFlowServiceServer) UpdateTransport(context.Context, *Transport) (*TransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransport not implemented")
}
func (UnimplementedWareFlowServiceServer) DeleteTransport(context.Context, *TransportRequest) (*TransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransport not implemented")
}
func (UnimplementedWareFlowServiceServer) CreateCargo(context.Context, *Cargo) (*CargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCargo not implemented")
}
func (UnimplementedWareFlowServiceServer) GetCargo(context.Context, *CargoRequest) (*Cargo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCargo not implemented")
}
func (UnimplementedWareFlowServiceServer) UpdateCargo(context.Context, *Cargo) (*CargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCargo not implemented")
}
func (UnimplementedWareFlowServiceServer) DeleteCargo(context.Context, *CargoRequest) (*CargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCargo not implemented")
}
func (UnimplementedWareFlowServiceServer) CalculateOptimalPath(context.Context, *OptimizationRequest) (*OptimizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateOptimalPath not implemented")
}
func (UnimplementedWareFlowServiceServer) mustEmbedUnimplementedWareFlowServiceServer() {}
func (UnimplementedWareFlowServiceServer) testEmbeddedByValue()                         {}

// UnsafeWareFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WareFlowServiceServer will
// result in compilation errors.
type UnsafeWareFlowServiceServer interface {
	mustEmbedUnimplementedWareFlowServiceServer()
}

func RegisterWareFlowServiceServer(s grpc.ServiceRegistrar, srv WareFlowServiceServer) {
	// If the following call pancis, it indicates UnimplementedWareFlowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WareFlowService_ServiceDesc, srv)
}

func _WareFlowService_CreateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Warehouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).CreateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_CreateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).CreateWarehouse(ctx, req.(*Warehouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_GetWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).GetWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_GetWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).GetWarehouse(ctx, req.(*WarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_UpdateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Warehouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).UpdateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_UpdateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).UpdateWarehouse(ctx, req.(*Warehouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_DeleteWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).DeleteWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_DeleteWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).DeleteWarehouse(ctx, req.(*WarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_CreateTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).CreateTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_CreateTransport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).CreateTransport(ctx, req.(*Transport))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_GetTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).GetTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_GetTransport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).GetTransport(ctx, req.(*TransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_UpdateTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).UpdateTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_UpdateTransport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).UpdateTransport(ctx, req.(*Transport))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_DeleteTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).DeleteTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_DeleteTransport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).DeleteTransport(ctx, req.(*TransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_CreateCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cargo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).CreateCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_CreateCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).CreateCargo(ctx, req.(*Cargo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_GetCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CargoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).GetCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_GetCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).GetCargo(ctx, req.(*CargoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_UpdateCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cargo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).UpdateCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_UpdateCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).UpdateCargo(ctx, req.(*Cargo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_DeleteCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CargoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).DeleteCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_DeleteCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).DeleteCargo(ctx, req.(*CargoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WareFlowService_CalculateOptimalPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareFlowServiceServer).CalculateOptimalPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WareFlowService_CalculateOptimalPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareFlowServiceServer).CalculateOptimalPath(ctx, req.(*OptimizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WareFlowService_ServiceDesc is the grpc.ServiceDesc for WareFlowService service.
// It's only intended for direct use with grpc_ware_flow.RegisterService,
// and not to be introspected or modified (even as a copy)
var WareFlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wareflow.WareFlowService",
	HandlerType: (*WareFlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWarehouse",
			Handler:    _WareFlowService_CreateWarehouse_Handler,
		},
		{
			MethodName: "GetWarehouse",
			Handler:    _WareFlowService_GetWarehouse_Handler,
		},
		{
			MethodName: "UpdateWarehouse",
			Handler:    _WareFlowService_UpdateWarehouse_Handler,
		},
		{
			MethodName: "DeleteWarehouse",
			Handler:    _WareFlowService_DeleteWarehouse_Handler,
		},
		{
			MethodName: "CreateTransport",
			Handler:    _WareFlowService_CreateTransport_Handler,
		},
		{
			MethodName: "GetTransport",
			Handler:    _WareFlowService_GetTransport_Handler,
		},
		{
			MethodName: "UpdateTransport",
			Handler:    _WareFlowService_UpdateTransport_Handler,
		},
		{
			MethodName: "DeleteTransport",
			Handler:    _WareFlowService_DeleteTransport_Handler,
		},
		{
			MethodName: "CreateCargo",
			Handler:    _WareFlowService_CreateCargo_Handler,
		},
		{
			MethodName: "GetCargo",
			Handler:    _WareFlowService_GetCargo_Handler,
		},
		{
			MethodName: "UpdateCargo",
			Handler:    _WareFlowService_UpdateCargo_Handler,
		},
		{
			MethodName: "DeleteCargo",
			Handler:    _WareFlowService_DeleteCargo_Handler,
		},
		{
			MethodName: "CalculateOptimalPath",
			Handler:    _WareFlowService_CalculateOptimalPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wareflow.proto",
}
