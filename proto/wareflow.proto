syntax = "proto3";

package wareflow;

option go_package = "github.com/miroslav/WareFlowV2/proto;wareflow";

// Сервис для управления объектами и оптимизации маршрутов
service WareFlowService {
  // Управление складами
  rpc CreateWarehouse(Warehouse) returns (WarehouseResponse);
  rpc GetWarehouse(WarehouseRequest) returns (Warehouse);
  rpc UpdateWarehouse(Warehouse) returns (WarehouseResponse);
  rpc DeleteWarehouse(WarehouseRequest) returns (WarehouseResponse);

  // Управление транспортом
  rpc CreateTransport(Transport) returns (TransportResponse);
  rpc GetTransport(TransportRequest) returns (Transport);
  rpc UpdateTransport(Transport) returns (TransportResponse);
  rpc DeleteTransport(TransportRequest) returns (TransportResponse);

  // Управление грузами
  rpc CreateCargo(Cargo) returns (CargoResponse);
  rpc GetCargo(CargoRequest) returns (Cargo);
  rpc UpdateCargo(Cargo) returns (CargoResponse);
  rpc DeleteCargo(CargoRequest) returns (CargoResponse);

  // Оптимизация маршрута
  rpc CalculateOptimalPath(OptimizationRequest) returns (OptimizationResponse);
}

// Сообщения для складов
message Warehouse {
  int32 id = 1;
  Location location = 2;
}

message WarehouseRequest {
  int32 id = 1;
}

message WarehouseResponse {
  string message = 1;
}

// Сообщения для транспорта
message Transport {
  int32 id = 1;
  string type = 2;
  int32 capacity_volume = 3;
  int32 capacity_weight = 4;
  double expense = 5;
}

message TransportRequest {
  int32 id = 1;
}

message TransportResponse {
  string message = 1;
}

// Сообщения для грузов
message Cargo {
  int32 id = 1;
  int32 weight = 2;
  double volume = 3;
  string description = 4;
}

message CargoRequest {
  int32 id = 1;
}

message CargoResponse {
  string message = 1;
}

// Оптимизация маршрута
message OptimizationRequest {
  repeated Warehouse warehouses = 1;
  repeated Transport transports = 2;
  repeated Cargo cargos = 3;
}

message OptimizationResponse {
  repeated Path routes = 1;
  double total_distance = 2;
  double total_cost = 3;
}

// Локация
message Location {
  int32 id = 1;
  string name = 2;
  string address = 3;
  double latitude = 4;
  double longitude = 5;
}

// Маршрут
message Path {
  int32 start_location_id = 1;
  int32 end_location_id = 2;
  double distance = 3;
  double duration = 4;
  double fuel_price = 5;
}
